end to end project :- MOVIE RECOMMENDATION SYSTEM CampusX
:- download dataset        (it can be books,songs,movies etc)
:- built model on it
:- convert into website
:- deploy into server

What are Recommender systems?

two types of recommender system :-
1)content based  :- recommend onthe basis of your content. eeg if you are listening sad song it will recommend that only.
2)collaborative filtering based  :- on the basis of user interest. if a and b likes movie 1 and a also like movie 2 then we can recommend movie 2 to b also.
3)hybrid :- combined both states . eg youtube

We will use content based recommeder system.


PROJECT FLOW :-

data -> preprocessing(ready data according to our need) -> create model -> website -> deploy

start :)

1) data from kaggle.com -> TMDB 5000 Movie Dataset



deploy in haroco server


















JUPYTER NOTEBOOK:-
movies.head() -> by default it will fetch first 4 data from the movies variable pdf
movies.head(n)-> n is number if it is 7 it will show upper 7 data
movies.head(1).['column name'].values -> it will show all the values of that column and here we also selected the first row 

movies.info() :- to fetch all column details

movies['original_language'].value_count() :- to fetch distinct values in that column which number of repetation in number
#selecting only that column which is helpful 

Merging Data Frames:-
to merge dataframes in pandas we use merge() function.
movies.merge(credits, on ="title")  -> movies data merge with credits data on the basis of title here, title will act as a primary key and the data will merge accordingly both the movies and credits have title column through which data merge

movies.shape -> it is used to return a tuple representing the dimensions of a dataframe. tuple contain two elements :- the number of rows and the number of column so the outputveg. is (12,2)



joining overview,genres,keeywords,cast and crew for tag.This will be the one paragraph abouy that particular movie

data preprocessing:-
1st check if there is any missing data present or not by movies.isnull().sum()
delete that row in which null value is true i.e;movies.dropna(inplace=True)
2nd check for duplicated row if exist then delete

movies.iloc[0].genres  
fetching 1st row from genres


streamlit for web application and pickle for dump and loading the dataframe or dictionary into it:)


for movie poster ...with the help of i[0] we can get id of the movie so fetchind poster from api
movie poster api :- tmdb account(the movie database)  ->setting-> api   search tmdb api and first website pick language and authenticate
pip freeze > requirements.txt
